{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","body_attr","document","createAttribute","value","body","setAttributeNode","className","id","onClick","body_tag","toggle_btn","getElementById","getAttributeNode","toggle_change","href","alt","onMouseOver","onMouseOut","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOA2CeA,MAxCf,WAEE,IAAIC,EAAYC,SAASC,gBAAgB,SAwBzC,OAvBAF,EAAUG,MAAQ,uBAClBF,SAASG,KAAKC,iBAAiBL,GAuB7B,yBAAKM,UAAU,UACb,6BACE,kDACA,4BAAQA,UAAU,uBAAuBC,GAAG,gBAAgBC,QAAS,YAhBvD,WAChB,IAAIC,EAAWR,SAASG,KACpBM,EAAaT,SAASU,eAAe,iBACU,yBAA/CD,EAAWE,iBAAiB,SAAST,OACvCM,EAASG,iBAAiB,SAAST,MAAQ,uBAC3CO,EAAWE,iBAAiB,SAAST,MAAQ,yBAG7CM,EAASG,iBAAiB,SAAST,MAAQ,uBAC3CO,EAAWE,iBAAiB,SAAST,MAAQ,wBAOgCU,KAA7E,iBAEF,yBAAKP,UAAU,WACb,0BAAMC,GAAG,cAAcD,UAAU,oBAAjC,+BACA,yCAAc,uBAAGA,UAAU,WAAWQ,KAAK,mCAAmCC,IAAI,yBAAyBC,YAAa,WA3B5Hf,SAASU,eAAe,eAAeC,iBAAiB,SAAST,MAAQ,qBA2ByEc,WAAY,WAvB9JhB,SAASU,eAAe,eAAeC,iBAAiB,SAAST,MAAQ,qBAuBvD,UAAd,gBCzBYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASU,eAAe,SD6H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2794ddb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n\n  let body_attr = document.createAttribute('class');\n  body_attr.value = 'toggle-button__black';\n  document.body.setAttributeNode(body_attr);\n\n  let profilepop = () => {\n    document.getElementById('git-profile').getAttributeNode('class').value = 'git-profile__show';\n  }\n\n  let profileoff = () => {\n    document.getElementById('git-profile').getAttributeNode('class').value = 'git-profile__hid';\n  }\n\n  let toggle_change = () => {\n      let body_tag = document.body;\n      let toggle_btn = document.getElementById('toggle-button');\n      if (toggle_btn.getAttributeNode('class').value === 'toggle-button__black') {\n        body_tag.getAttributeNode('class').value = 'toggle-button__black';\n        toggle_btn.getAttributeNode('class').value = 'toggle-button__white';\n      }\n      else {\n        body_tag.getAttributeNode('class').value = 'toggle-button__white';\n        toggle_btn.getAttributeNode('class').value = 'toggle-button__black';\n      }\n  }\n  return (\n    <div className='header'>\n      <div>\n        <p>Welcome to my page!</p>\n        <button className='toggle-button__white' id='toggle-button' onClick={() => { toggle_change() }}>Change Theme</button>\n      </div>\n      <div className='git-div'>\n        <span id='git-profile' className='git-profile__hid'>Praveen Kagitha (kagithapk)</span>\n        <p>This is my <a className='git-link' href='https://www.github.com/kagithapk' alt='https://www.github.com' onMouseOver={() => {profilepop()}} onMouseOut={() => {profileoff()}}>Github</a> profile!</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}